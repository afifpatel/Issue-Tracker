{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","connect","then","client","listen","console","log","catch","error","get","req","res","filter","query","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","owner","collection","find","toArray","issues","metadata","total_count","length","_metadata","records","message","issueId","params","id","_id","limit","next","issue","post","newIssue","body","created","Date","err","validateIssue","insertOne","result","findOne","insertedId","query_result","count","new_issue","put","updateOne","$set","convertIssue","savedIssue","delete","deleteOne","deleteResult","n","errror","sendFile","path","resolve"],"mappings":"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","file":"server.js","sourcesContent":["// const express =  require('express');\r\n// const bodyParser= require('body-parser');\r\n// const MongoClient = require('mongodb').MongoClient;\r\n// const Issue = require('./issue.js');\r\n\r\n\r\nimport express from 'express';                          //ES2015 \r\nimport bodyParser from 'body-parser';                   //ES2015 \r\nimport { MongoClient, ObjectId } from 'mongodb';                  //ES2015 \r\nimport Issue from './issue.js'                          //ES2015 \r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';   //To let Node.js report line numbers by using source maps, we need to install thesource-map-support module, and also call the library in the application once\r\nSourceMapSupport.install();\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\n// const issues = [\r\n//     {\r\n//         id: 1, status: 'open', owner: 'Ravan',\r\n//         created: new Date('2016-08-15'), effort: 5, completionDate: undefined,\r\n//         title: 'Error in console when clicking Add',\r\n//     },\r\n//     {\r\n//         id: 2, status: 'Assigned', owner: 'Eddie',\r\n//         created: new Date('2016-08-16'), effort: 14,\r\n//         completionDate: new Date('2016-08-30'),\r\n//         title: 'Missing bottom border on panel',\r\n//     },\r\n//     ];\r\n\r\n    // const validIssueStatus = {\r\n    //     New: true,\r\n    //     Open: true,\r\n    //     Assigned: true,\r\n    //     Fixed: true,\r\n    //     Verified: true,\r\n    //     Closed: true,\r\n    //     };\r\n\r\n    // const issueFieldType = {\r\n    //     status: 'required',\r\n    //     owner: 'required',\r\n    //     effort: 'optional',\r\n    //     created: 'required',\r\n    //     completionDate: 'optional',\r\n    //     title: 'required',\r\n    //     };\r\n\r\n// app.get('/hello', (req,res) => {\r\n//     res.send('Hello World');\r\n// });\r\n\r\nlet db;\r\nMongoClient.connect('mongodb://localhost').then(client => {\r\n    db = client.db('issuetracker');\r\n    app.listen(3000, () => {\r\n        console.log('App startedddddd on port 3000');\r\n    });\r\n}).catch(error => {\r\n    console.log('ERROR:', error);\r\n});\r\n\r\napp.get('/api/issues', (req,res) => {\r\n    const filter = {};\r\n    // console.log(req);\r\n    if (req.query.status) filter.status = req.query.status;\r\n    if(req.query.effort_lte || req.query.effort_gte) filter.effort = {};\r\n    if(req.query.effort_lte)\r\n        filter.effort.$lte = parseInt(req.query.effort_lte, 10);\r\n    if(req.query.effort_gte)\r\n        filter.effort.$gte = parseInt(req.query.effort_gte, 10)\r\n    if(req.query.owner)\r\n        filter.owner = req.query.owner;\r\n\r\n    db.collection('issues').find(filter).toArray().then( issues => {\r\n        const metadata = { total_count: issues.length };\r\n        res.json({ _metadata: metadata, records : issues})\r\n    }).catch(error =>{\r\n        console.log(error);\r\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n    });\r\n });\r\n\r\napp.get('/api/issues/:id', (req,res) =>{\r\n        let issueId;\r\n        try {\r\n            issueId = new ObjectId(req.params.id);\r\n        } catch (error){\r\n            res.status(422).json({ message: `Invalid issue ID format: ${error}` });\r\n            return;\r\n        }\r\n        \r\n        db.collection('issues').find({ _id : issueId }).limit(1)\r\n        .next()\r\n        .then( issue => { \r\n            if (!issue) res.status(404).json({ message: `No such issue: ${issueId}` });\r\n            else res.json(issue);\r\n        })\r\n        .catch( error => {\r\n            console.log(error);\r\n            res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n        });\r\n    });\r\n \r\napp.post('/api/issues', (req,res) => {\r\n    const newIssue = req.body;\r\n    // newIssue.id = issues.length + 1;\r\n    newIssue.created = new Date();\r\n   // console.log(JSON.stringify(newIssue));\r\n    if(!newIssue.status)\r\n        newIssue.status = 'New';\r\n\r\n    const err = Issue.validateIssue(newIssue)\r\n    console.log(newIssue);\r\n\r\n    if(err){\r\n        res.status(422).json({ message: `Invalid request: ${err}` });\r\n        return;\r\n    }\r\n\r\n   // issues.push(newIssue);\r\n    db.collection('issues').insertOne(newIssue).then( result => \r\n        db.collection('issues').findOne({ _id: result.insertedId })).then( query_result => \r\n            db.collection('issues').count().then( metadata => \r\n                res.json({ _metadata: metadata , new_issue : query_result})        \r\n            )        \r\n        ).catch(err =>{\r\n        console.log(err);\r\n        res.status(500).json({ message: `Internal Server Error: ${err}` });\r\n    });\r\n});\r\n\r\n\r\napp.put('/api/issues/:id', (req, res) => {\r\n  let issueId;\r\n  try {\r\n    issueId = new ObjectId(req.params.id);\r\n  } catch (error) {\r\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\r\n    return;\r\n  }\r\n\r\n  const issue = req.body;\r\n  delete issue._id;\r\n//   console.log(\"issueId =>\",issueId);\r\n\r\n//   console.log(\"issue =>\",issue);\r\n\r\n  const err = Issue.validateIssue(issue);\r\n  if (err) {\r\n    res.status(422).json({ message: `Invalid request: ${err}` });\r\n    return;\r\n  }\r\n\r\n  db.collection('issues').updateOne({ _id: issueId }, { $set : Issue.convertIssue(issue)}).then(() =>\r\n    db.collection('issues').find({ _id: issueId }).limit(1)\r\n    .next()\r\n  )\r\n  .then(savedIssue => {\r\n    res.json(savedIssue);\r\n  })\r\n  .catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\napp.delete('/api/issues/:id', (req,res) => {\r\n    let issueId;\r\ntry{\r\n    issueId = new ObjectId(req.params.id);\r\n}\r\ncatch (error){\r\n    res.status(422).json({ message : `Invalid issue ID format: ${error}`});\r\n    return;\r\n}\r\n    \r\n    db.collection('issues').deleteOne({ _id : issueId }).then( deleteResult => {\r\n        if(deleteResult.result.n === 1) res.json({ status: 'OK'});\r\n        else res.json({ status: 'Warning: object not found' });\r\n    })\r\n    .catch( error => {\r\n        console.log(error);\r\n        res.status(500).json({ message : `Internal Server Error: ${errror}` });\r\n    });\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n    res.sendFile(path.resolve('static/index.html'));\r\n});\r\n// app.listen(3000, function(){\r\n//     console.log('App started on port 3000');\r\n// });\r\n\r\n// function validateIssue(issue) {\r\n//     for(const field in issue ){\r\n//         const type = issueFieldType[field];\r\n//     if(!type) {\r\n//         delete issue[field];\r\n//     } else if ( type == 'required' && !issue[field]){\r\n//         return `${field} is required.`;\r\n//     }\r\n// }\r\n\r\n// if(!validIssueStatus[issue.status])\r\n//     return `${issue.status} is not a valid status.`;\r\n\r\n// return null;\r\n\r\n// }"]}